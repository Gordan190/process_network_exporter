// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package util

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DataKey struct {
	_tab flatbuffers.Table
}

func GetRootAsDataKey(buf []byte, offset flatbuffers.UOffsetT) *DataKey {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataKey{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DataKey) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataKey) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DataKey) Pid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DataKey) Src() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DataKey) Dst() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DataKey) Typestr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DataKeyStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DataKeyAddPid(builder *flatbuffers.Builder, pid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pid), 0)
}
func DataKeyAddSrc(builder *flatbuffers.Builder, src flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(src), 0)
}
func DataKeyAddDst(builder *flatbuffers.Builder, dst flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dst), 0)
}
func DataKeyAddTypestr(builder *flatbuffers.Builder, typestr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(typestr), 0)
}
func DataKeyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
